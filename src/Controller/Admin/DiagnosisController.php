<?php
namespace App\Controller\Admin;

use App\Controller\AppController;
use Cake\Core\Configure;
use Cake\Event\Event;
use Cake\Test\Fixture\ThingsFixture;
use Cake\Utility\Security;
use Cake\Routing\Router;
use Cake\Mailer\Email;

// New Define
use Cake\Auth\DefaultPasswordHasher;
use Cake\Auth\Auth;
use Cake\ORM\TableRegistry;
use Cake\Utility\Text;
use Cake\Filesystem\File;
use App\Model\Entity\Medicine;

/**
 * Diagnosis Controller
 *
 * @property \App\Model\Table\DiagnosisTable $Diagnosis */
class DiagnosisController extends AppController
{
    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->Auth->allow(['getOnlineDiagnosisTemplates','getLocalDiagnosisTemplates']);
    }

    public $components = ['Common'];

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
        $session = $this->request->session();

        if(isset($this->request->query['search']) and trim($this->request->query['search'])!='' ) {
            $session->write('diagnosis_search_query', $this->request->query['search']);
        }
        if($session->check('diagnosis_search_query')) {
            $search = $session->read('diagnosis_search_query');
        }else{
            $search = '';
        }

        $where = $this->__search();

        if($where){
            $query = $this->Diagnosis->find('All')->where($where);
        }else{
            $query = $this->Diagnosis;
        }

        $this->paginate = [
            'contain' => ['DiagnosisLists', 'Medicines', 'Tests'],
            'limit' => 30,
            'order' => [
                'Diagnosis.id' => 'desc'
            ]
        ];
        $diagnosis = $this->paginate($query);

        if(count($diagnosis)==0){
            $this->Flash->adminWarning(__('No diagnosis template  found!')  ,['key' => 'admin_warning'], ['key' => 'admin_warning'] );
        }

        $this->set(compact('diagnosis', 'search'));
        $this->set('_serialize', ['diagnosis']);
    }

    /**
     * View method
     *
     * @param string|null $id Diagnosi id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $diagnosi = $this->Diagnosis->get($id, [
            'contain' => ['Medicines', 'Tests']
        ]);

        $this->set('diagnosi', $diagnosi);
        $this->set('_serialize', ['diagnosi']);
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $diagnosi = $this->Diagnosis->newEntity();
        if ($this->request->is('post')) {

            $this->request->data['diagnosis_list_id'] = $this->request->data['diagnosis_list_id'][0];

            $diagnosis_template = $this->Diagnosis->find('all')
                ->where([
                    'Diagnosis.doctor_id' => $this->request->session()->read('Auth.User.id'),
                    'Diagnosis.template_name' => trim($this->request->data['template_name'])
                ])->first();

            if(empty($diagnosis_template)){

                $diagnosi = $this->Diagnosis->patchEntity($diagnosi, $this->request->data);

                $diagnosi->doctor_id = $this->request->session()->read('Auth.User.id');
                if ($this->Diagnosis->save($diagnosi)) {
                    $this->Flash->adminSuccess(__('The diagnosis template has been saved.'),  ['key' => 'admin_success'] );
                } else {
                    $this->Flash->adminError(__('The diagnosis template could not be saved. Please, try again.'), ['key' => 'admin_error']);
                }
                return $this->redirect(['action' => 'index']);
            }else{
                $this->Flash->adminWarning(__('The template name already taken'), ['key' => 'admin_warning']);
                return $this->redirect(['action' => 'add']);
            }
        }

        $this->loadModel('DiagnosisLists');
        $diagnosis_list = $this->DiagnosisLists->find('list', ['limit' => 1]);

        $medicines = $tests = [];

        $this->set(compact('diagnosi', 'diagnosis_list', 'medicines', 'tests'));
        $this->set('_serialize', ['diagnosi']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Diagnosi id.
     * @return \Cake\Network\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $diagnosi = $this->Diagnosis->get($id, [
            'contain' => ['Medicines', 'Tests']
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {

            $this->request->data['diagnosis_list_id'] = $this->request->data['diagnosis_list_id'][0];

            $diagnosis_template = $this->Diagnosis->find('all')
                ->where([
                    'Diagnosis.doctor_id' => $this->request->session()->read('Auth.User.id'),
                    'Diagnosis.template_name' => trim($this->request->data['template_name']),
                    'Diagnosis.id !=' => $id
                ])
                ->first();

            if(empty($diagnosis_template)){
                $diagnosi = $this->Diagnosis->patchEntity($diagnosi, $this->request->data);
                if ($this->Diagnosis->save($diagnosi)) {
                    $this->Flash->adminSuccess(__('The diagnosis template has been saved.'), ['key' => 'admin_success']);
                } else {
                    $this->Flash->adminError(__('The diagnosis template could not be saved. Please, try again.'), ['key' => 'admin_error']);
                }
                return $this->redirect(['action' => 'index']);
            }else{
                $this->Flash->adminWarning(__('The template name already taken'), ['key' => 'admin_warning']);
                return $this->redirect(['action' => 'edit/'.$id]);
            }
        }

        // get existing medicines
        $default_medicines = [];
        if($diagnosi['medicines']){
            foreach($diagnosi['medicines'] as $medicine){
                $default_medicines[] = $medicine['id'];
            }
        }

        // get existing tests
        $default_tests = [];
        if($diagnosi['tests']){
            foreach($diagnosi['tests'] as $test){
                $default_tests[] = $test['id'];
            }
        }

        // populate selected medicines only if medicines are available
        $medicines = '';
        if($default_medicines){
            $medicines = $this->Diagnosis->Medicines->find('list', ['limit' => 100])->where([
                'Medicines.id IN ' => $default_medicines
            ]);
        }

        // populate selected tests only if tests are available
        $tests = '';
        if($default_tests){
            $tests = $this->Diagnosis->Tests->find('list', ['limit' => 200])->where([
                'Tests.id IN ' => $default_tests
            ]);
        }

        $this->loadModel('DiagnosisLists');
        $get_diagnosis = $this->DiagnosisLists->findById($diagnosi->diagnosis_list_id)->first();

        $diagnosis_list = [];
        $diagnosis_list[$get_diagnosis->id] = $get_diagnosis['name'];

        $this->set(compact('diagnosi', 'medicines', 'tests', 'default_medicines', 'default_tests', 'diagnosis_list'));
        $this->set('_serialize', ['diagnosi']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Diagnosi id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $diagnosi = $this->Diagnosis->get($id);
        if ($this->Diagnosis->delete($diagnosi)) {
            $success_message = __('The diagnosis template  has been deleted.');
            $this->Flash->adminSuccess($success_message, ['key' => 'admin_success']);
        } else {
            $this->Flash->adminError(__('The diagnosis template could not be deleted. Please, try again.') , ['key' => 'admin_error']);
        }
        return $this->redirect(['action' => 'index']);
    }

    function __search(){
        $session = $this->request->session();

        $doctor_id = $session->read('Auth.User.id');

        if($session->check('diagnosis_search_query')){
            $search = $session->read('diagnosis_search_query');
            $where = ['Diagnosis.doctor_id' => $doctor_id,
                      'Diagnosis.status' => 1,
                    'OR' => [
                        ['DiagnosisLists.name LIKE' => '%' . $search . '%']
                    ]
            ];
        }else{
            $where = [
                    'Diagnosis.doctor_id' => $doctor_id,
                    'Diagnosis.status' => 1
                ];
        }
        return $where;
    }

    function reset(){
        $session = $this->request->session();
        $session->delete('diagnosis_search_query');
        $this->redirect(['action' => 'index']);
    }


    function getDiagnosis($ids,$prescription_id = null){
        $this->autoRender = false;

        $ids = explode("_",$ids);
        if($ids){
            $contain = ['contain' =>['Medicines', 'Tests']];
            $diagnosis = $this->Diagnosis->find('all',$contain)->where([
                    'Diagnosis.id IN ' => $ids
                ]);

            $medicines = $this->prepareMedicines($diagnosis,$prescription_id);

            $tests = $this->prepareTests($diagnosis);

            $chief_complain = array();
            foreach($diagnosis as $item){
                if ($item->chief_complain){
                    $chief_complain[] = $item->chief_complain;
                }
            }

            $on_examination = array();
            foreach($diagnosis as $item){
                if ($item->on_examination){
                    $on_examination[] = $item->on_examination;
                }
            }

            $instructions = array();
            foreach($diagnosis as $item){
                if ($item->instructions){
                    $instructions[] = $item->instructions;
                }
            }

            $all_chief_complain = implode(",\n",$chief_complain);
            $all_on_examination = implode(",\n",$on_examination);
            $all_instructions = implode(",\n",$instructions);
        }

        echo json_encode(array('all_chief_complain' => $all_chief_complain, 'medicines' => $medicines, 'tests' => $tests, 'all_instructions' => $all_instructions, 'all_on_examination' => $all_on_examination));die;
    }

    function prepareMedicines($diagnosis,$prescription_id){

        $medicines = [];
        foreach($diagnosis as $item){
            if($item->medicines){
                foreach($item->medicines as $medicine){
                    $rule = $this->getMedicineRule($prescription_id, $medicine->id);
                    $medicines[] = array('id' => $medicine->id, 'name' => $medicine->name, 'rule' => $rule  );
                }
            }
        }

        return $medicines;
    }

    function prepareTests($diagnosis){
        $tests = [];
        foreach($diagnosis as $item){
            if($item->tests){
                foreach($item->tests as $test){
                    $tests[$test->id] = $test->name;
                }
            }
        }
        return $tests;
    }

    function getMedicineRule($prescription_id, $medicine_id){
        if(is_numeric($prescription_id)){
            $this->loadModel('PrescriptionsMedicines');
            $prescriptions_medicines = $this->PrescriptionsMedicines->find('all')
                ->where(['PrescriptionsMedicines.prescription_id' => $prescription_id,
                    'PrescriptionsMedicines.medicine_id' => $medicine_id])->first();

            if(!empty($prescriptions_medicines->rule)) {
                return $prescriptions_medicines->rule;
            }
        }
    }





/************************************************
///////////////////Api///////////////////////////
*************************************************/

    public function getOnlineDiagnosisTemplates(){
        $this->autoRender = false;
        $this->loadModel('Users');
        header('Content-Type: application/json');

        if ($this->request->is('get')){

            $online_doctor_id = $this->Common->getOnlineDoctorId($this->request->query['doctor_email']);

            $online_diagnosis_templates = $this->Diagnosis->find('all', ['contain' => ['DiagnosisLists','Medicines','Tests']],['limit' => 100])
                                                ->order(['Diagnosis.id' => 'asc'])
                                                ->where([
                                                        'Diagnosis.doctor_id' => $online_doctor_id,
                                                        'Diagnosis.is_sync' => 0
                                                ])->toArray();

            echo json_encode($online_diagnosis_templates);die;

        }elseif ($this->request->is('post')){
            $this->changeIsSyncOnlineDiagnosisTemplates($this->request->data);
        }
    }

    public function changeIsSyncOnlineDiagnosisTemplates($online_diagnosis_template_ids){
        foreach ($online_diagnosis_template_ids as $online_diagnosis_template_id){
            $diagnosis = $this->Diagnosis->get($online_diagnosis_template_id);
            $diagnosis->is_sync = 1;
            $this->Diagnosis->save($diagnosis);
        }
    }

    // diagnosis
    public function getLocalDiagnosisTemplates(){
        $this->autoRender = false;
        $this->loadModel('DiagnosisLists');
        $this->loadModel('Users');
        $this->loadModel('Medicines');
        $this->loadModel('Tests');
        header('Content-Type: application/json');

        $online_doctor_id = $this->Common->getOnlineDoctorId($this->request->query['doctor_email']);

        if ($online_doctor_id){
            $local_diagnosis_templates = json_decode($this->request->data[0]);

            $online_success = $online_duplicate = 0;
            $will_sync_true_diagnosis_template_ids = [];

            foreach ($local_diagnosis_templates as $local_diagnosis_template){

                $diagnosis_list_id = $this->DiagnosisLists->findByName($local_diagnosis_template->diagnosis->name)
                    ->select('DiagnosisLists.id')->first();

                $have_diagnosis_template = $this->Diagnosis->find('all')
                    ->where(['Diagnosis.diagnosis_list_id' => $diagnosis_list_id['id'],
                        'Diagnosis.doctor_id' => $online_doctor_id
                    ])->first();

                if ($diagnosis_list_id And empty($have_diagnosis_template)){

                    $will_sync_true_diagnosis_template_ids[] = $local_diagnosis_template->id;

                    $instructions = $local_diagnosis_template->instructions;

                    if ($local_diagnosis_template->diagnosis_medicine){
                        $medicines = $this->collectLocalDiagnosisMedicine($local_diagnosis_template->diagnosis_medicine);
                    }

                    if ($local_diagnosis_template->diagnosis_test){
                        $tests = $this->collectLocalDiagnosisTest($local_diagnosis_template->diagnosis_test);
                    }

                    $this->saveLocalDiagnosisTemplateToOnline($diagnosis_list_id['id'], $instructions, $medicines, $tests, $online_doctor_id);

                    $online_success++;

                }elseif($diagnosis_list_id And $have_diagnosis_template){

                    $have_diagnosis_template->is_sync = 1;
                    $this->Diagnosis->save($have_diagnosis_template);

                    $will_sync_true_diagnosis_template_ids[] = $local_diagnosis_template->id;
                    $online_duplicate++;
                }
            }

            if ($will_sync_true_diagnosis_template_ids){
                echo json_encode([
                    'status'=>'success',
                    'will_sync_ids' => $will_sync_true_diagnosis_template_ids,
                    'online_success' => $online_success,
                    'online_duplicate' => $online_duplicate
                ]);die;
            }
        }
        echo json_encode(['status'=>'fail']);die;
    }

    function collectLocalDiagnosisMedicine($diagnosis_medicines){
        $medicines = [];
        foreach ($diagnosis_medicines as $diagnosis_medicine){

            $medicine_id = $this->Medicines->findByName($diagnosis_medicine->medicine->name)->select('Medicines.id')->first();

            if ($medicine_id){
                $medicines['_ids'][] = $medicine_id['id'];
            }
        }
        return $medicines;
    }

    function collectLocalDiagnosisTest($diagnosis_tests){
        $tests = [];
        foreach ($diagnosis_tests as $diagnosis_test){

            $test_id = $this->Tests->findByName( $diagnosis_test->test->name)->select('Tests.id')->first();

            if ($test_id){
                $tests['_ids'][] = $test_id['id'];
            }
        }
        return $tests;
    }

    function saveLocalDiagnosisTemplateToOnline($list_id, $instructions, $medicines, $tests, $online_doctor_id){
        $store_able_data = [];
        $store_able_data['diagnosis_list_id'] = $list_id;
        $store_able_data['instructions'] = $instructions;
        $store_able_data['medicines'] = $medicines;
        $store_able_data['tests'] = $tests;

        $diagnosi = $this->Diagnosis->newEntity();
        $diagnosi = $this->Diagnosis->patchEntity($diagnosi, $store_able_data);

        $diagnosi->doctor_id = $online_doctor_id;
        $diagnosi->is_sync = 1;
        $this->Diagnosis->save($diagnosi);
    }
}
